#!/usr/bin/env node

// üöÄ SCRIPT CONFIGURATION AUTOMATIQUE - VALET IA
// Execute: node scripts/setup-environment.js

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

console.log(`
ü§ñ CONFIGURATION VALET IA - SALONS DE COIFFURE
===============================================

Ce script va configurer automatiquement ton environnement.
Tu auras besoin de:
‚úÖ Compte Twilio (d√©j√† cr√©√©)
‚ùì Compte ElevenLabs (voix fran√ßaise)
‚ùì Compte Supabase (base de donn√©es)
‚ùì Compte Stripe (paiements)
‚ùì Compte OpenAI (intelligence IA)

Commen√ßons...
`);

async function setupEnvironment() {
  const config = {};

  console.log('\nüîß CONFIGURATION SERVICES...\n');

  // Twilio (d√©j√† cr√©√©)
  console.log('üìû TWILIO (d√©j√† configur√©)');
  config.TWILIO_ACCOUNT_SID = await question('Account SID Twilio: ');
  config.TWILIO_AUTH_TOKEN = await question('Auth Token Twilio: ');
  config.TWILIO_PHONE_NUMBER = await question('Num√©ro Twilio (+15551234567): ');

  // ElevenLabs
  console.log('\nüéôÔ∏è ELEVENLABS (voix fran√ßaise IA)');
  console.log('üí° Si pas de compte: https://elevenlabs.io/ ‚Üí Plan Starter $5/mois');
  const hasElevenLabs = await question('As-tu un compte ElevenLabs? (y/n): ');
  
  if (hasElevenLabs.toLowerCase() === 'y') {
    config.ELEVENLABS_API_KEY = await question('API Key ElevenLabs: ');
    config.ELEVENLABS_VOICE_ID_FRENCH_CA = await question('Voice ID fran√ßais (ou laisser vide): ') || 'fr-CA-sylvie-warm';
  } else {
    console.log('‚ùå ElevenLabs requis pour voix naturelle. Utilisation voix par d√©faut...');
    config.ELEVENLABS_API_KEY = 'CONFIGURE_ELEVENLABS_LATER';
    config.ELEVENLABS_VOICE_ID_FRENCH_CA = 'fr-CA-default';
  }

  // Supabase
  console.log('\nüóÑÔ∏è SUPABASE (base de donn√©es)');
  console.log('üí° Si pas de compte: https://supabase.com/ ‚Üí Nouveau projet');
  const hasSupabase = await question('As-tu un projet Supabase? (y/n): ');
  
  if (hasSupabase.toLowerCase() === 'y') {
    config.SUPABASE_URL = await question('URL Supabase (https://xxx.supabase.co): ');
    config.SUPABASE_ANON_KEY = await question('Anon Key Supabase: ');
    config.SUPABASE_SERVICE_ROLE_KEY = await question('Service Role Key Supabase: ');
  } else {
    console.log('‚ùå Supabase requis pour base de donn√©es. Configuration plus tard...');
    config.SUPABASE_URL = 'CONFIGURE_SUPABASE_LATER';
    config.SUPABASE_ANON_KEY = 'CONFIGURE_SUPABASE_LATER';
    config.SUPABASE_SERVICE_ROLE_KEY = 'CONFIGURE_SUPABASE_LATER';
  }

  // Stripe
  console.log('\nüí≥ STRIPE (paiements 99$/mois)');
  console.log('üí° Si pas de compte: https://stripe.com/ ‚Üí Mode test d\'abord');
  const hasStripe = await question('As-tu un compte Stripe? (y/n): ');
  
  if (hasStripe.toLowerCase() === 'y') {
    config.STRIPE_PUBLISHABLE_KEY = await question('Publishable Key Stripe (pk_test_...): ');
    config.STRIPE_SECRET_KEY = await question('Secret Key Stripe (sk_test_...): ');
    config.STRIPE_WEBHOOK_SECRET = await question('Webhook Secret (whsec_... ou laisser vide): ') || 'CONFIGURE_WEBHOOK_LATER';
  } else {
    console.log('‚ùå Stripe requis pour mon√©tisation. Configuration plus tard...');
    config.STRIPE_PUBLISHABLE_KEY = 'CONFIGURE_STRIPE_LATER';
    config.STRIPE_SECRET_KEY = 'CONFIGURE_STRIPE_LATER';
    config.STRIPE_WEBHOOK_SECRET = 'CONFIGURE_STRIPE_LATER';
  }

  // OpenAI
  console.log('\nüß† OPENAI (intelligence IA)');
  console.log('üí° Si pas de compte: https://platform.openai.com/ ‚Üí $50 cr√©dit');
  const hasOpenAI = await question('As-tu un compte OpenAI? (y/n): ');
  
  if (hasOpenAI.toLowerCase() === 'y') {
    config.OPENAI_API_KEY = await question('API Key OpenAI (sk-...): ');
    config.OPENAI_MODEL = 'gpt-4';
  } else {
    console.log('‚ö†Ô∏è OpenAI optionnel mais recommand√© pour IA avanc√©e...');
    config.OPENAI_API_KEY = 'CONFIGURE_OPENAI_LATER';
    config.OPENAI_MODEL = 'gpt-3.5-turbo';
  }

  // Configuration additionnelle
  config.NODE_ENV = 'development';
  config.PORT = '3000';
  config.APP_URL = await question('URL de ton app Replit (https://xxx.replit.dev): ') || 'https://your-app.replit.dev';
  config.JWT_SECRET = generateRandomString(32);
  config.ENCRYPTION_KEY = generateRandomString(32);
  config.USE_MOCK_DATA = 'true';
  config.ENABLE_DEMO_MODE = 'true';
  config.DEMO_SALON_ID = 'salon-001-tony';

  // G√©n√©ration fichier .env
  await generateEnvFile(config);
  
  console.log('\n‚úÖ CONFIGURATION TERMIN√âE!');
  console.log(`
üìã R√âSUM√â:
- Fichier .env cr√©√©
- ${Object.keys(config).length} variables configur√©es
- Mode d√©veloppement activ√©
- Donn√©es de d√©monstration disponibles

üöÄ PROCHAINES √âTAPES:
1. V√©rifier le fichier .env g√©n√©r√©
2. Installer d√©pendances: npm run setup
3. D√©marrer l'app: npm start
4. Tester avec salon Tony: ${config.DEMO_SALON_ID}

üí° SERVICES √Ä CONFIGURER:
${!hasElevenLabs ? '- ‚ùå ElevenLabs (voix IA)\n' : ''}${!hasSupabase ? '- ‚ùå Supabase (base de donn√©es)\n' : ''}${!hasStripe ? '- ‚ùå Stripe (paiements)\n' : ''}${!hasOpenAI ? '- ‚ùå OpenAI (IA avanc√©e)\n' : ''}

üìû TEST RAPIDE:
Appelle ton num√©ro Twilio pour tester la voix IA!
  `);

  rl.close();
}

async function generateEnvFile(config) {
  let envContent = `# ü§ñ CONFIGURATION VALET IA - G√âN√âR√â AUTOMATIQUEMENT
# Date: ${new Date().toISOString()}
# ‚ö†Ô∏è GARDEZ CE FICHIER SECRET - NE JAMAIS COMMITTER

# ==============================================
# TWILIO - GESTION APPELS 24/7
# ==============================================
TWILIO_ACCOUNT_SID=${config.TWILIO_ACCOUNT_SID}
TWILIO_AUTH_TOKEN=${config.TWILIO_AUTH_TOKEN}
TWILIO_PHONE_NUMBER=${config.TWILIO_PHONE_NUMBER}
TWILIO_WEBHOOK_URL=${config.APP_URL}/webhook

# ==============================================
# ELEVENLABS - VOIX FRAN√áAISE IA
# ==============================================
ELEVENLABS_API_KEY=${config.ELEVENLABS_API_KEY}
ELEVENLABS_VOICE_ID_FRENCH_CA=${config.ELEVENLABS_VOICE_ID_FRENCH_CA}

# ==============================================
# SUPABASE - BASE DE DONN√âES
# ==============================================
SUPABASE_URL=${config.SUPABASE_URL}
SUPABASE_ANON_KEY=${config.SUPABASE_ANON_KEY}
SUPABASE_SERVICE_ROLE_KEY=${config.SUPABASE_SERVICE_ROLE_KEY}

# ==============================================
# STRIPE - MON√âTISATION 99$/SALON
# ==============================================
STRIPE_PUBLISHABLE_KEY=${config.STRIPE_PUBLISHABLE_KEY}
STRIPE_SECRET_KEY=${config.STRIPE_SECRET_KEY}
STRIPE_WEBHOOK_SECRET=${config.STRIPE_WEBHOOK_SECRET}

# ==============================================
# OPENAI - INTELLIGENCE IA
# ==============================================
OPENAI_API_KEY=${config.OPENAI_API_KEY}
OPENAI_MODEL=${config.OPENAI_MODEL}

# ==============================================
# CONFIGURATION SALON
# ==============================================
NODE_ENV=${config.NODE_ENV}
PORT=${config.PORT}
APP_URL=${config.APP_URL}

# ==============================================
# S√âCURIT√â
# ==============================================
JWT_SECRET=${config.JWT_SECRET}
ENCRYPTION_KEY=${config.ENCRYPTION_KEY}

# ==============================================
# D√âVELOPPEMENT
# ==============================================
USE_MOCK_DATA=${config.USE_MOCK_DATA}
ENABLE_DEMO_MODE=${config.ENABLE_DEMO_MODE}
DEMO_SALON_ID=${config.DEMO_SALON_ID}

# ==============================================
# NOTIFICATIONS (OPTIONNEL)
# ==============================================
SENDGRID_API_KEY=CONFIGURE_SENDGRID_LATER
SENDGRID_FROM_EMAIL=noreply@quebecai-labs.com
SENTRY_DSN=CONFIGURE_SENTRY_LATER
`;

  const envPath = path.join(process.cwd(), '.env');
  fs.writeFileSync(envPath, envContent);
  
  console.log('\n‚úÖ Fichier .env cr√©√© avec succ√®s!');
  
  // Cr√©er aussi .env.local pour Replit
  const envLocalPath = path.join(process.cwd(), '.env.local');
  fs.writeFileSync(envLocalPath, envContent);
  console.log('‚úÖ Fichier .env.local cr√©√© pour Replit!');
}

function generateRandomString(length) {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

// Lancement du script
if (require.main === module) {
  setupEnvironment().catch(console.error);
}

module.exports = { setupEnvironment };